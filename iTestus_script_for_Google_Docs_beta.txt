/***  Base64 encode / decode *  http://www.webtoolkit.info/ ***/ 
var Base64 = {
 
  // private property
  _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
 
  // public method for encoding
  encode : function (input) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;
 
    input = Base64._utf8_encode(input);
 
    while (i < input.length) {
 
      chr1 = input.charCodeAt(i++);
      chr2 = input.charCodeAt(i++);
      chr3 = input.charCodeAt(i++);
 
      enc1 = chr1 >> 2;
      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
      enc4 = chr3 & 63;
 
      if (isNaN(chr2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
        enc4 = 64;
      }
 
      output = output +
      this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
      this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
    }
    return output;
  },
 
  // public method for decoding
  decode : function (input) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
 
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 
    while (i < input.length) {
 
      enc1 = this._keyStr.indexOf(input.charAt(i++));
      enc2 = this._keyStr.indexOf(input.charAt(i++));
      enc3 = this._keyStr.indexOf(input.charAt(i++));
      enc4 = this._keyStr.indexOf(input.charAt(i++));
 
      chr1 = (enc1 << 2) | (enc2 >> 4);
      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
      chr3 = ((enc3 & 3) << 6) | enc4;
 
      output = output + String.fromCharCode(chr1);
 
      if (enc3 != 64) {
        output = output + String.fromCharCode(chr2);
      }
      if (enc4 != 64) {
        output = output + String.fromCharCode(chr3);
      }
    }
    output = Base64._utf8_decode(output);
    return output;
  },
 
  // private method for UTF-8 encoding
  _utf8_encode : function (string) {
    string = string.replace(/\r\n/g,"\n");
    var utftext = "";
 
    for (var n = 0; n < string.length; n++) {
 
      var c = string.charCodeAt(n);
 
      if (c < 128) {
        utftext += String.fromCharCode(c);
      }
      else if((c > 127) && (c < 2048)) {
        utftext += String.fromCharCode((c >> 6) | 192);
        utftext += String.fromCharCode((c & 63) | 128);
      }
      else {
        utftext += String.fromCharCode((c >> 12) | 224);
        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
        utftext += String.fromCharCode((c & 63) | 128);
      }
    }
    return utftext;
  },
 
  // private method for UTF-8 decoding
  _utf8_decode : function (utftext) {
    var string = "";
    var i = 0;
    var c = c1 = c2 = 0;
 
    while ( i < utftext.length ) {
 
      c = utftext.charCodeAt(i);
 
      if (c < 128) {
        string += String.fromCharCode(c);
        i++;
      }
      else if((c > 191) && (c < 224)) {
        c2 = utftext.charCodeAt(i+1);
        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
        i += 2;
      }
      else {
        c2 = utftext.charCodeAt(i+1);
        c3 = utftext.charCodeAt(i+2);
        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
        i += 3;
      }
    }
     return string;
  }
}

    function Encrypt(InString, Password){
    var PasswordI = 0;
    var Result = "";

    PasswordI = InString.length % Password.length;

    for (i=0; i<InString.length; i++){
      Result = Result + String.fromCharCode(InString.charCodeAt(i)+Password.charCodeAt(PasswordI));
      PasswordI++;
      if (PasswordI == Password.length) {
        PasswordI = 0;}
    }
    return Base64.encode(Result);    
    }    
    
function onOpen() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var menuEntries = [ {name: "Компилировать файл теста", functionName: "Generate_Test_File"},
                      {name: "Компилировать список студентов", functionName: "Generate_Students_List"},                      
                      {name: "Создать список файлов тестов", functionName: "Generate_Filelist"}];
  ss.addMenu("iTestus", menuEntries);
}

function Generate_Test_File() {
  // запрос пароля
  var password = Browser.inputBox("Введите пароль для шифрования теста:");

  var testsize = 0;
  var bodysize = 0;

  //Создание файла-теста
  var message = ""; // Текст сообщения
  var error_num = 0; // нет ошибок

  // <body>
  var body_id = "0"; // индекс
  var body_subject = "bsubj"; // тема теста
  var body_size = "bsize"; // количество спрашиваемых вопросов при тестировании
  var body_password = ""; // пароль теста

  for (i=0; i<password.length; i++){
    body_password = body_password + String.fromCharCode(password.charCodeAt(i) % password.length)}
  body_password = Encrypt(body_password,password);
 
  // <section>
  var section_name = "";
  var section_percent = "123";
  var section_price = "";
  var section_id = 0;

  var question_condition = "true";
  var question_id = 0;
  var question_question = "";

  var answer_type = "";
  var answer_id = 0;
  var answer_answer = "";

  //вставляем метку UTF-8
  message = String.fromCharCode(65279)+"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getActiveSheet();
  
  var startRow = 2;  // Начинаем со второй строки. Первая строка - заголовок
  var numRows = sheet.getMaxRows(); // Вычисляем максимальное количество строк
  var dataRange = sheet.getRange(startRow, 1, numRows, 4); // Fetch values for each row in the Range.
  var data = dataRange.getValues();

  for (i in data){ 
       var row = data[i];
    if (row[0] != "")
         {if (row[0] == "subject") {           
           body_subject = row[1];
           body_size = row[2];
           
           // открываем тег <body id="0" subject="Биохимия нервной системы" size="25" password="Zm5wb2M=">
           message = message + "<body id=\""+body_id+"\" subject=\""+body_subject+"\" size=\""+body_size+"\" password=\"" +body_password+"\">\n";
           }
         }
    
         {if (row[0] == "section") {
           bodysize++;
           
           section_name = row[1];
           section_percent = row[2];
           section_price = row[3];
           section_id = section_id + 1;
           
           if (section_id != 1){message = message + "\t\t\t<questionsize>"+answer_id+"</questionsize>\n\t\t</question>\n" + "\t\t<sectionsize>"+question_id+"</sectionsize>\n\t</section>\n";}
           
           question_id = 0;
                      
           // открываем тег <section>: <section name="Раздел 1" percent="50" price="1" id="1">
           message = message + "\t<section name=\"" + section_name + "\" percent=\"" + section_percent + "\" price=\"" + section_price + "\" id=\"" + section_id + "\">\n";
           }
          }
     
         {if (row[0] == "q") {
           testsize++;
           
           question_question = Encrypt(row[1],password);
           question_id = question_id + 1;
                      
           if (question_id != 1){message = message + "\t\t\t<questionsize>"+answer_id+"</questionsize>\n\t\t</question>\n";}
           
           answer_id = 0;
                      
           message = message + "\t\t<question condition=\"true\" id=\""+section_id+"."+question_id+"\" question=\"" + question_question + "\">\n";
         }
         }
    
         {if ((row[0] == "t") || (row[0] == "f")){
           answer_answer = Encrypt(row[1],password);
           answer_id = answer_id + 1;
           if (row[0] == "t") {answer_type = "true";}
           if (row[0] == "f") {answer_type = "false"};
          message = message + "\t\t\t<answer id=\"" + section_id+"."+question_id+"."+answer_id + "\" type=\"" + answer_type + "\">" + answer_answer + "</answer>\n";
         }
         }
    
       };

  //закрываем тег </question>
  message = message + "\t\t\t<questionsize>"+answer_id+"</questionsize>\n\t\t</question>\n";

  //закрываем тег </section>\n
  message = message + "\t\t<sectionsize>"+question_id+"</sectionsize>\n\t</section>\n"  

  //<testsize id="testsize">4</testsize>
  message = message + "\t<testsize id=\"testsize\">"+testsize+"</testsize>\n";
    
  //<bodysize id="bodysize">2</bodysize>
  message = message + "\t<bodysize id=\"bodysize\">"+bodysize+"</bodysize>\n";

  // закрываем тег <body>
  message = message + "</body>"

  if (error_num == 0) {
    var filename_txt = sheet.getName()+".txt";
    filename_txt = filename_txt.toUpperCase();

    var myFiles = [{fileName:filename_txt, content:message}]
    MailApp.sendEmail(Session.getUser().getEmail(), "Файл "+filename_txt+" для программы iTestus", "В приложении файл "+filename_txt+". Скопируйте его в папку TESTS программы iTestus и не забудьте внести изменения в файл FILELIST.TXT.\n\n", {attachments: myFiles});
    Browser.msgBox("Файл "+filename_txt+" отправлен по адресу "+Session.getUser().getEmail()+".");
   }
  
  if (error_num != 0) {
     Show_Error(error_num);
   }
}

function Generate_Students_List() {  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getActiveSheet();
  
  var startRow = 2;  // Начинаем со второй строки. Первая строка - заголовок
  var numRows = sheet.getMaxRows(); // Вычисляем максимальное количество строк
  var dataRange = sheet.getRange(startRow, 1, numRows, 2); // Fetch values for each row in the Range.
  var data = dataRange.getValues();
  
  var message = ""; // Текст сообщения
  var comma = ""; // Разделитель
      
  for (i in data){ 
       var row = data[i];
       if (row[0] != "") {
         message = message + "\n" + "<student name=\"gruppa\">"+row[0]+"</student>";}
        if (row[1] != "") {
         message = message + "\n" + "<student name=\"student\">"+row[1]+"</student>";}
       };
  
  //Собственно файл списка студентов: заголовок + список + конец //String.fromCharCode(65279)
  message = String.fromCharCode(65279)+"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<String>\n<tema>"+sheet.getName()+"</tema>" + message + "\n" + "</String>";
  
  var myFiles = [{fileName:"STUDENTS.TXT", content:message}]
  MailApp.sendEmail(Session.getUser().getEmail(), "Список студентов для iTestus", "В приложении файл STUDENTS.TXT со списком студентов. Скопируйте его в папку программы iTestus.\n\n", {attachments: myFiles});
  
  Browser.msgBox("Список студентов отправлен по адресу "+Session.getUser().getEmail()+".");
}

function Generate_Filelist(){
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getActiveSheet();
  
  var startRow = 2;  // Начинаем со второй строки. Первая строка - заголовок
  var numRows = sheet.getMaxRows(); // Вычисляем максимальное количество строк
  var dataRange = sheet.getRange(startRow, 1, numRows, 2); // Fetch values for each row in the Range.
  var data = dataRange.getValues();
  
  var message = ""; // Текст сообщения
  var comma = ""; // Разделитель
  
  for (i in data){
       var row = data[i];
       if (row[0] != "") { message = message + comma + row[0];}
       comma = ",";
       };

  message = "'Перечислите подключаемые файлы через запятую после &filelist=\n" + "&filelist="+message;

  var myFiles = [{fileName:"FILELIST.TXT", mime:"text/xml", content:message}]
  
  MailApp.sendEmail(Session.getUser().getEmail(), "Список файлов для iTestus", "В приложении файл FILELIST.TXT со списком файлов. Скопируйте его в папку программы iTestus.\n\n", {attachments: myFiles});
  
  Browser.msgBox("Список файлов отправлен по адресу "+Session.getUser().getEmail()+".");
}

function Show_Error(error_number){
  switch(error_number) {
      
  case 1:
      Browser.msgBox("В исходном файле более одной темы теста."+" Ошибка #"+error_num+".");
  break;

  case 2:
      Browser.msgBox("Отсутствует тема теста."+" Ошибка #"+error_num+".");
  break;

  case 3:
      Browser.msgBox("Ошибка синтаксиса темы теста."+" Ошибка #"+error_num+".");
  break;

  case 4:
      Browser.msgBox("Отсутствует название темы."+" Ошибка #"+error_num+".");
  break;

  case 5:
      Browser.msgBox("Количество вопросов в теме не является числом."+" Ошибка #"+error_num+".");
  break;

  case 6:
      Browser.msgBox("Количество вопросов в теме больше количества вопросов в исходном файле."+" Ошибка #"+error_num+".");
  break;

  case 7:
      Browser.msgBox("Ошибка синтаксиса раздела."+" Ошибка #"+error_num+".");
  break;

  case 8:
      Browser.msgBox("Отсутствует название раздела."+" Ошибка #"+error_num+".");
  break;

  case 9:
      Browser.msgBox("Проценты в разделе не являются числом."+" Ошибка #"+error_num+".");
  break;
      
  case 10:
      Browser.msgBox("Баллы в разделе не являются числом."+" Ошибка #"+error_num+".");
  break;

  case 11:
      Browser.msgBox("Сумма процентов в разделах не равна 100."+" Ошибка #"+error_num+".");
  break;

  case 12:
      Browser.msgBox("Слишком много вариантов ответов."+" Ошибка #"+error_num+".");
  break;

  case 13:
      Browser.msgBox("Неверное распределение процентов в разделах."+" Ошибка #"+error_num+".");
  break;

  case 14:
      Browser.msgBox("Неверный формат файла."+" Ошибка #"+error_num+".");
  break;

  case 15:
      Browser.msgBox("Длина варианта ответа более 190 символов."+" Ошибка #"+error_num+".");
  break;
      
  case 16:
      Browser.msgBox("Отсутствуют варианты ответа."+" Ошибка #"+error_num+".");
  break;

  case 17:
      Browser.msgBox("Проверка синтаксиса прервана пользователем."+" Ошибка #"+error_num+".");
  break;

  case 18:
      Browser.msgBox("Отсутствуют верные варианты ответа."+" Ошибка #"+error_num+".");
  break;

  case 19:
      Browser.msgBox("Отсутствуют неверные варианты ответа."+" Ошибка #"+error_num+".");
  break;

  case 20:
      Browser.msgBox("Обнаружен пустая строка."+" Ошибка #"+error_num+".");
  break;
      
  default:
      Browser.msgBox("Ошибка #"+error_num+".");
   }
  }​
